{"version":3,"sources":["picker.jsx","index.jsx"],"names":["useStyles","makeStyles","theme","listRoot","width","maxWidth","backgroundColor","palette","background","paper","minWidth","cardContent","padding","card","title","margin","root","display","alignItems","flexDirection","height","nameRoot","winCount","marginRight","color","fontSize","cardActions","justifyContent","winTextRoot","winnerRoot","marginTop","Picker","classes","React","useState","contestants","checked","setChecked","winner","setWinner","reduce","acc","cur","checkedHistory","setCheckedHistory","waiting","setWaiting","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","className","Typography","variant","Card","CardContent","List","dense","map","labelId","displayName","ListItem","key","button","onClick","ListItemText","id","primary","primaryTypographyProps","ListItemSecondaryAction","Checkbox","edge","onChange","inputProps","CardActions","Button","disabled","length","choice","Math","random","setTimeout","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.acc2902a.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Typography } from '@material-ui/core';\nimport { ScaleLoader } from 'react-spinners';\nimport contestants from './contestants.json';\n\n// const contestants = [\n//   'Lorraine',\n//   'Dave',\n//   'Paul',\n//   'John',\n//   'Jim',\n//   'Steve',\n// ];\n\nconst useStyles = makeStyles((theme) => ({\n  listRoot: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n    minWidth: '300px',\n  },\n  cardContent: {\n    padding: '4px 16px',\n  },\n  card: {\n    width: 'max-content',\n  },\n  title: {\n    margin: '1vh 0',\n  },\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    flexDirection: 'column',\n    height: '100vh',\n  },\n  nameRoot: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  winCount: {\n    display: 'inline-block',\n    minWidth: '24px',\n    marginRight: '6px',\n    color: 'grey',\n    fontSize: '0.8rem',\n  },\n  cardActions: {\n    justifyContent: 'space-around', padding: '16px 8px',\n  },\n  winTextRoot: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  winnerRoot: {\n    marginTop: '1vh',\n  },\n}));\n\nexport default function Picker() {\n  const classes = useStyles();\n  const [checked, setChecked] = React.useState([...contestants]);\n  const [winner, setWinner] = React.useState('');\n  const [checkedHistory, setCheckedHistory] = React.useState(contestants.reduce((acc, cur) => {\n    acc[cur] = 0;\n    return acc;\n  }, {}));\n  const [waiting, setWaiting] = React.useState(false);\n\n  const handleToggle = (value) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const pick = () => {\n    const choice = checked[checked.length * Math.random() | 0]; // eslint-disable-line\n    setWaiting(true);\n    setTimeout(() => {\n      checkedHistory[choice] += 1;\n      setCheckedHistory(checkedHistory);\n      setWaiting(false);\n      setWinner(choice);\n    }, (Math.random() + 0.5) * 1000);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography className={classes.title} variant=\"h4\">\n        CrapDistributor v0.1\n      </Typography>\n      <Card className={classes.card}>\n        <CardContent className={classes.cardContent}>\n          <List dense className={classes.listRoot}>\n            {contestants.map((value) => {\n              const labelId = `checkbox-list-secondary-label-${value}`;\n              const displayName = (\n                <div className={classes.nameRoot}>\n                  <span className={classes.winCount}>{checkedHistory[value]}</span>\n                  <span>{value}</span>\n                </div>\n              );\n              return (\n                <ListItem key={value} button onClick={handleToggle(value)}>\n                  <ListItemText id={labelId} primary={displayName} primaryTypographyProps={{ variant: 'h6' }} />\n                  <ListItemSecondaryAction>\n                    <Checkbox\n                      edge=\"end\"\n                      onChange={handleToggle(value)}\n                      checked={checked.indexOf(value) !== -1}\n                      inputProps={{ 'aria-labelledby': labelId }}\n                    />\n                  </ListItemSecondaryAction>\n                </ListItem>\n              );\n            })}\n          </List>\n        </CardContent>\n        <CardActions className={classes.cardActions}>\n          <Button disabled={checked.length < 2 || waiting} variant=\"contained\" color=\"primary\" onClick={pick}>\n            Pick One!\n          </Button>\n          <Button disabled={waiting} color=\"secondary\" onClick={() => { setChecked([]); setWinner(''); }}>\n            Clear\n          </Button>\n        </CardActions>\n      </Card>\n      <br />\n      <div className={classes.winnerRoot}>\n        {waiting ? <ScaleLoader /> : winner !== '' ? ( // eslint-disable-line\n          <div className={classes.winTextRoot}>\n            <Typography variant=\"h5\">\n              Winner:\n            </Typography>\n            <Typography variant=\"h4\">\n              {winner}\n            </Typography>\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Picker from './picker';\n\nfunction App() {\n  return (\n    <Picker />\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}