{"version":3,"sources":["picker.jsx","index.jsx"],"names":["useStyles","makeStyles","theme","listRoot","width","maxWidth","backgroundColor","palette","background","paper","minWidth","cardContent","padding","card","title","margin","root","display","alignItems","flexDirection","height","nameRoot","winCount","marginRight","color","fontSize","cardActions","justifyContent","winTextRoot","winnerRoot","marginTop","hr","border","dialogActions","dialogContent","buttonsContainer","marginBottom","Picker","initCheckedHistory","contestants","reduce","acc","cur","push","name","count","classes","React","useState","dialogOpen","setDialogOpen","val","localStorage","getItem","setItem","getFairModeFromLocalStorage","sortaFairMode","setSortaFairMode","checked","setChecked","winner","setWinner","ch","JSON","stringify","parse","checkedHistory","setCheckedHistory","waiting","setWaiting","handleToggle","value","currentIndex","indexOf","newChecked","splice","handleCloseDialog","handleToggleFairMode","toString","findInHistory","contestant","find","x","reportChoice","choice","setTimeout","Math","random","className","Typography","variant","IconButton","onClick","window","open","Card","CardContent","List","dense","ListItem","key","ListItemText","primary","primaryTypographyProps","ListItemSecondaryAction","Checkbox","edge","onChange","length","map","labelId","displayName","button","id","inputProps","CardActions","Button","disabled","groups","filter","y","curr","found","findIndex","members","sort","a","b","choiceArray","i","forEach","member","j","pickSortaFair","pick","Dialog","onClose","DialogTitle","DialogContent","DialogActions","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1b0b47f4.chunk.js","sourcesContent":["/* eslint-disable no-plusplus */\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  IconButton, Typography, CardContent, CardActions, Card,\n  Button, Checkbox, ListItemText, ListItemSecondaryAction,\n  ListItem, List, Dialog, DialogActions, DialogContent,\n  DialogTitle,\n} from '@material-ui/core';\nimport GithubIcon from '@material-ui/icons/GitHub';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { ScaleLoader } from 'react-spinners';\nimport contestants from './contestants.json';\n\nconst useStyles = makeStyles((theme) => ({\n  listRoot: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n    minWidth: '300px',\n  },\n  cardContent: {\n    padding: '4px 16px',\n  },\n  card: {\n    width: 'max-content',\n  },\n  title: {\n    margin: '1vh 0',\n  },\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    flexDirection: 'column',\n    height: '100vh',\n  },\n  nameRoot: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  winCount: {\n    display: 'inline-block',\n    minWidth: '24px',\n    marginRight: '6px',\n    color: 'grey',\n    fontSize: '0.8rem',\n  },\n  cardActions: {\n    justifyContent: 'space-around', padding: '4px 8px 16px',\n  },\n  winTextRoot: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  winnerRoot: {\n    marginTop: '1vh',\n  },\n  hr: {\n    padding: '0',\n    margin: '0 auto',\n    width: '90%',\n    border: '0.5px solid lightgray',\n  },\n  dialogActions: {\n    marginTop: '16px',\n  },\n  dialogContent: {\n    width: '60vw',\n    height: '20vh',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-evenly',\n  },\n  buttonsContainer: {\n    marginBottom: '4px',\n  },\n}));\n\nexport default function Picker() {\n  const initCheckedHistory = () => contestants.reduce((acc, cur) => {\n    acc.push({ name: cur, count: 0 });\n    return acc;\n  }, []);\n\n  const getFairModeFromLocalStorage = () => {\n    const val = localStorage.getItem('sortaFairMode');\n    if (val === null) {\n      localStorage.setItem('sortaFairMode', false);\n      return false;\n    }\n    return (val === 'true');\n  };\n  const getCheckedHistoryFromLocalStorage = () => {\n    const val = localStorage.getItem('checkedHistory');\n    if (val === null) {\n      const ch = initCheckedHistory();\n      localStorage.setItem('checkedHistory', JSON.stringify(ch));\n      return ch;\n    }\n    return JSON.parse(val);\n  };\n\n  const classes = useStyles();\n  const [dialogOpen, setDialogOpen] = React.useState(false);\n  const [sortaFairMode, setSortaFairMode] = React.useState(getFairModeFromLocalStorage());\n  const [checked, setChecked] = React.useState([...contestants]);\n  const [winner, setWinner] = React.useState('');\n  const [checkedHistory, setCheckedHistory] = React.useState(getCheckedHistoryFromLocalStorage);\n  const [waiting, setWaiting] = React.useState(false);\n\n  const handleToggle = (value) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const handleOpenDialog = () => {\n    setDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n  };\n\n  const handleToggleFairMode = () => {\n    setSortaFairMode(!sortaFairMode);\n    localStorage.setItem('sortaFairMode', (!sortaFairMode).toString());\n  };\n\n  const clearHistory = () => {\n    const ch = initCheckedHistory();\n    localStorage.setItem('checkedHistory', JSON.stringify(ch));\n    setCheckedHistory(ch);\n  };\n\n  const findInHistory = (contestant) => checkedHistory.find((x) => x.name === contestant);\n\n  const reportChoice = (choice) => {\n    setWaiting(true);\n    setTimeout(() => {\n      findInHistory(choice).count += 1;\n      setCheckedHistory(checkedHistory);\n      localStorage.setItem('checkedHistory', JSON.stringify(checkedHistory));\n      setWaiting(false);\n      setWinner(choice);\n    }, (Math.random() + 0.5) * 500);\n  };\n\n  const pickSortaFair = () => {\n    const groups = checkedHistory\n    // 1. Get the win history for the selected contestants\n      .filter((x) => checked.find((y) => y === x.name))\n    /*\n        2. Group the selected contestants by how many times they've won\n        e.g.:\n        [\n          { count: 2, members: [ Clagius, Arenar ] },\n          { count: 4, members: [ Oritonde, Lydia ] }\n        ]\n    */\n      .reduce((acc, curr) => {\n        const found = acc.findIndex((x) => x.count === curr.count);\n        if (found === -1) {\n          acc.push({ count: curr.count, members: [curr.name] });\n        } else {\n          acc[found].members.push(curr.name);\n        }\n        return acc;\n      }, []);\n\n    // 3. Sort the groups by how many times they've won (descending)\n    groups.sort((a, b) => b.count - a.count);\n    const choiceArray = [];\n    /*\n        4. Loop through the groups. Add each group member to the final array\n        i number of times, where i is the index of the group +1\n        e.g.:\n        [ Clagius, Arenar, Oritonde, Oritonde, Lydia, Lydia ]\n    */\n    for (let i = 0; i < groups.length; i++) {\n      groups[i].members.forEach((member) => {\n        for (let j = 0; j <= i; j++) {\n          choiceArray.push(member);\n        }\n      });\n    }\n    // 5. Pick a random contestant from the array\n    const choice = choiceArray[choiceArray.length * Math.random() | 0]; // eslint-disable-line\n    reportChoice(choice);\n  };\n\n  const pick = () => {\n    const choice = checked[checked.length * Math.random() | 0]; // eslint-disable-line\n    reportChoice(choice);\n  };\n\n  const handlePick = () => {\n    if (sortaFairMode) {\n      pickSortaFair();\n    } else {\n      pick();\n    }\n  };\n\n  const handleSelectAll = () => {\n    if (checked.length === contestants.length) {\n      setChecked([]);\n    } else {\n      setChecked([...contestants]);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography className={classes.title} variant=\"h4\">\n        CrapDistributor v0.2\n      </Typography>\n      <div className={classes.buttonsContainer}>\n        <IconButton onClick={() => window.open('https://github.com/sbeck14/crap-distributor', '_blank')}><GithubIcon /></IconButton>\n        <IconButton onClick={handleOpenDialog}><SettingsIcon /></IconButton>\n      </div>\n      <Card className={classes.card}>\n        <CardContent className={classes.cardContent}>\n          <List dense className={classes.listRoot}>\n            <ListItem key=\"select-all\">\n              <ListItemText primary=\"Contestants\" primaryTypographyProps={{ variant: 'h5' }} />\n              <ListItemSecondaryAction>\n                <Checkbox\n                  edge=\"end\"\n                  onChange={handleSelectAll}\n                  checked={checked.length === contestants.length}\n                  color=\"primary\"\n                />\n              </ListItemSecondaryAction>\n            </ListItem>\n            <hr className={classes.hr} />\n            {contestants.map((value) => {\n              const labelId = `checkbox-list-secondary-label-${value}`;\n              const displayName = (\n                <div className={classes.nameRoot}>\n                  <span className={classes.winCount}>{findInHistory(value).count}</span>\n                  <span>{value}</span>\n                </div>\n              );\n              return (\n                <ListItem key={value} button onClick={handleToggle(value)}>\n                  <ListItemText id={labelId} primary={displayName} primaryTypographyProps={{ variant: 'h6' }} />\n                  <ListItemSecondaryAction>\n                    <Checkbox\n                      edge=\"end\"\n                      onChange={handleToggle(value)}\n                      checked={checked.indexOf(value) !== -1}\n                      inputProps={{ 'aria-labelledby': labelId }}\n                    />\n                  </ListItemSecondaryAction>\n                </ListItem>\n              );\n            })}\n          </List>\n        </CardContent>\n        <CardActions className={classes.cardActions}>\n          <Button\n            disabled={checked.length < 2 || waiting}\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handlePick}\n          >\n            Pick a winner\n          </Button>\n          <Button disabled={waiting} color=\"secondary\" onClick={() => { setChecked([]); setWinner(''); }}>\n            Clear\n          </Button>\n        </CardActions>\n      </Card>\n      <br />\n      <div className={classes.winnerRoot}>\n        {waiting ? <ScaleLoader /> : winner !== '' ? ( // eslint-disable-line\n          <div className={classes.winTextRoot}>\n            <Typography variant=\"h5\">\n              Winner:\n            </Typography>\n            <Typography variant=\"h4\">\n              {winner}\n            </Typography>\n          </div>\n        ) : null}\n      </div>\n      <Dialog open={dialogOpen} onClose={handleCloseDialog} maxWidth=\"md\">\n        <DialogTitle id=\"form-dialog-title\">Settings</DialogTitle>\n        <DialogContent className={classes.dialogContent}>\n          <List>\n            <ListItem key=\"fairMode\" button onClick={handleToggleFairMode}>\n              <ListItemText id=\"fairMode\" primary='\"Fair\" Mode' primaryTypographyProps={{ variant: 'subtitle1' }} />\n              <ListItemSecondaryAction>\n                <Checkbox\n                  edge=\"end\"\n                  onChange={handleToggleFairMode}\n                  checked={sortaFairMode}\n                />\n              </ListItemSecondaryAction>\n            </ListItem>\n          </List>\n          <Button variant=\"contained\" onClick={clearHistory}>Clear Winner History</Button>\n        </DialogContent>\n        <DialogActions className={classes.dialogActions}>\n          <Button onClick={handleCloseDialog} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Picker from './picker';\n\nfunction App() {\n  return (\n    <Picker />\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}